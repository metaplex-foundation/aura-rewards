//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplxRewardsError {
    /// 0 (0x0) - Input account owner
    #[error("Input account owner")]
    InvalidAccountOwner,
    /// 1 (0x1) - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,
    /// 2 (0x2) - Rewards: No deposits
    #[error("Rewards: No deposits")]
    RewardsNoDeposits,
    /// 3 (0x3) - Rewards: lockup period invalid
    #[error("Rewards: lockup period invalid")]
    InvalidLockupPeriod,
    /// 4 (0x4) - Rewards: distribution_ends_at date is lower than current date
    #[error("Rewards: distribution_ends_at date is lower than current date")]
    DistributionInThePast,
    /// 5 (0x5) - Rewards: distribution_ends_at date is lower than current date
    #[error("Rewards: distribution_ends_at date is lower than current date")]
    InvalidPrimitiveTypesConversion,
    /// 6 (0x6) - Rewards: unclaimed rewards must be claimed
    #[error("Rewards: unclaimed rewards must be claimed")]
    RewardsMustBeClaimed,
    /// 7 (0x7) - Rewards: rewards amount must be positive
    #[error("Rewards: rewards amount must be positive")]
    RewardsMustBeGreaterThanZero,
    /// 8 (0x8) - Rewards: Delegate must have at least 15_000_000 of own weighted stake
    #[error("Rewards: Delegate must have at least 15_000_000 of own weighted stake")]
    InsufficientWeightedStake,
    /// 9 (0x9) - Rewards: Stake from others must be zero
    #[error("Rewards: Stake from others must be zero")]
    StakeFromOthersMustBeZero,
    /// 10 (0xA) - No changes at the date in weighted stake modifiers while they're expected
    #[error("No changes at the date in weighted stake modifiers while they're expected")]
    NoWeightedStakeModifiersAtADate,
    /// 11 (0xB) - Passed delegates are the same
    #[error("Passed delegates are the same")]
    DelegatesAreTheSame,
    /// 12 (0xC) - Getting pointer to the data of the zero-copy account has failed
    #[error("Getting pointer to the data of the zero-copy account has failed")]
    RetreivingZeroCopyAccountFailire,
    /// 13 (0xD) - Account is already initialized
    #[error("Account is already initialized")]
    AlreadyInitialized,
    /// 14 (0xE) - Account addres derivation has failed
    #[error("Account addres derivation has failed")]
    AccountDerivationAddresFailed,
    /// 15 (0xF) - This contract is supposed to be called only from the staking contract
    #[error("This contract is supposed to be called only from the staking contract")]
    ForbiddenInvocation,
}

impl solana_program::program_error::PrintProgramError for MplxRewardsError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
